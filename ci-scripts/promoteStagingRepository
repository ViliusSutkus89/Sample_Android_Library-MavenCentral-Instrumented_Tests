#!/usr/bin/env perl
###########################################################################################
### The Purpose ### The Purpose ### The Purpose ### The Purpose ### The Purpose ### The ###
###########################################################################################
# The purpose of this script is to promote a build in staging repository to MavenCentral.
###########################################################################################
### ~The Purpose~ # ~The Purpose~ # ~The Purpose~ # ~The Purpose~ # ~The Purpose~ # ~The~ #
###########################################################################################
use strict;
use warnings;

use File::Basename;
use Getopt::Long;
use HTTP::Tiny;
use MIME::Base64;
use Storable 'dclone';

sub usage {
    print STDERR './', File::Basename::basename(__FILE__), " [--nexusUrl=https://oss.sonatype.org/service/local/] stagingRepositoryId\n";
    print STDERR "\tOptional: nexusUrl can also be https://s01.oss.sonatype.org/service/local/ . Defaults to https://oss.sonatype.org/service/local/ .\n";
    print STDERR "\tMandatory: stagingRepositoryId is obtained when initializing the repository. Example - comviliussutkus89-1154.\n";
    print STDERR "\nRequired environment variables: sonatypeUsername and sonatypePassword.\n";
    exit 1;
}

my $nexusUrl = 'https://oss.sonatype.org/service/local/';
my $help;
Getopt::Long::GetOptions('nexusUrl=s' => \$nexusUrl, 'help' => \$help);
if (defined $help) {
    usage();
}
my $repositoryId = shift @ARGV or do {
    print STDERR "Missing mandatory argument stagingRepositoryId!\n";
    usage();
};

die("Environment variables sonatypeUsername and sonatypePassword are mandatory!\n") unless (defined($ENV{sonatypeUsername}) && $ENV{sonatypeUsername} && defined($ENV{sonatypePassword}) && $ENV{sonatypePassword});

my %authHeaders = (Authorization => 'Basic ' . encode_base64($ENV{sonatypeUsername} . ':' . $ENV{sonatypePassword}, ''));
my $http = HTTP::Tiny->new(default_headers => \%authHeaders);

sub getProfileId {
    my $http = shift;
    my $nexusUrl = shift;
    my $repositoryId = shift;

    my $url = $nexusUrl . 'staging/repository/' . $repositoryId;
    my $response = $http->get($url);
    die("Failure!\n$url returned bad HTTP Status Code: " . $response->{status} . "\n") unless $response->{success};
    die("Failed to parse profileId!\n") unless $response->{content} =~ /<profileId>(\w+)<\/profileId>/;
    return $1;
}

sub promoteRepository {
    my $http = shift;
    my $headers = dclone(shift);
    my $nexusUrl = shift;
    my $repositoryId = shift;
    my $profileId = shift;

    $headers->{'Content-Type'} = 'application/xml';
    my $response = $http->post("${nexusUrl}staging/profiles/${profileId}/promote", {
        content => "<promoteRequest><data><stagedRepositoryId>${repositoryId}</stagedRepositoryId></data></promoteRequest>",
        headers => $headers
    });
    die("Failure!\nPromotion call returned bad HTTP Status Code: " . $response->{status} . "\n") unless $response->{success};
}

my $profileId = getProfileId($http, $nexusUrl, $repositoryId);
promoteRepository($http, \%authHeaders, $nexusUrl, $repositoryId, $profileId);
