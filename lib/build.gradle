group = 'com.viliussutkus89'

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30

        versionCode 27
        versionName rootProject.version

        archivesBaseName = rootProject.name

        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Following Config Fields used in VersionGetter,
        // Not important for the library template
        buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
        buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
        buildConfigField("String", "GIT_COMMMIT", "\"${System.env.GITHUB_SHA}\"")
    }
}

configurations {
    javadocDependenciesToObtainClasspath
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // 'implementation' config cannot be used for javadoc classpath,
    // include all dependencies in 'javadocDependenciesToObtainClasspath' too.
    // javadocDependenciesToObtainClasspath 'androidx.annotation:annotation:1.2.0'

    //#UNCOMMENT-DURING-STAGING#implementation 'com.viliussutkus89:samplelib:#STAGING-VERSION#'
    // The line above is used by the scripts/prepareLibraryForStagingRepository
}

task sourceJar(type: Jar) {
    archiveClassifier.set('sources')
    into ("", { from android.sourceSets.main.java.srcDirs} )
    into ("", { from file("../LICENSE")})
}

task javadoc(type: Javadoc) {
    options.encoding = 'UTF-8'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDependenciesToObtainClasspath
    title = "${rootProject.name} ${project.version} API"
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifactId rootProject.name
                version = rootProject.version

                artifact sourceJar
                artifact javadocJar

                pom {
                    name = rootProject.name
                    description = 'Sample_Android_Library-MavenCentral-Instrumented_Tests'
                    url = 'https://github.com/ViliusSutkus89/Sample_Android_Library-MavenCentral-Instrumented_Tests'
                    packaging = 'aar'
                    inceptionYear = '2021'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://opensource.org/licenses/MIT'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = "ViliusSutkus89"
                            name = "Vilius Sutkus"
                            email = "ViliusSutkus89@gmail.com"
                        }
                    }
                    scm {
                        url = 'https://github.com/ViliusSutkus89/Sample_Android_Library-MavenCentral-Instrumented_Tests'
                        connection = 'https://github.com/ViliusSutkus89/Sample_Android_Library-MavenCentral-Instrumented_Tests.git'
                    }
                }
            }
        }
    }

    // This may look ugly...
    // but useInMemoryPgpKeys expects valid keys even with required { false }
    if (System.getenv('SIGNING_KEY')) {
        signing {
            required { true }
            useInMemoryPgpKeys(System.getenv('SIGNING_KEY'), System.getenv('SIGNING_PASS'))
            sign publishing.publications.release
        }
    }
}
